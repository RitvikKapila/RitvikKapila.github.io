name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  # Jekyll Build Test
  jekyll-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'
        bundler-cache: true
    
    - name: Install Jekyll dependencies
      run: bundle install
    
    - name: Build Jekyll site
      run: bundle exec jekyll build
    
    - name: Check for build artifacts
      run: |
        if [ ! -d "_site" ]; then
          echo "Build failed - _site directory not created"
          exit 1
        fi
        echo "Jekyll build successful"

  # HTML Validation
  html-validation:
    runs-on: ubuntu-latest
    needs: jekyll-build
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'
        bundler-cache: true
    
    - name: Build Jekyll site
      run: bundle exec jekyll build
    
    - name: Install HTML validator
      run: |
        sudo apt-get update
        sudo apt-get install -y wget
        wget -q https://github.com/validator/validator/releases/latest/download/vnu.linux.zip
        unzip vnu.linux.zip
        chmod +x vnu/vnu
    
    - name: Validate HTML
      run: |
        ./vnu/vnu --format json _site/index.html > html_validation.json || true
        if [ -s html_validation.json ]; then
          echo "HTML validation issues found:"
          cat html_validation.json
          # Don't fail the build for minor HTML issues, just report them
        else
          echo "HTML validation passed"
        fi

  # CSS Validation
  css-validation:
    runs-on: ubuntu-latest
    needs: jekyll-build
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'
        bundler-cache: true
    
    - name: Build Jekyll site
      run: bundle exec jekyll build
    
    - name: Install CSS validator
      run: |
        sudo apt-get update
        sudo apt-get install -y curl
        curl -sL https://deb.nodesource.com/setup_18.x | sudo -E bash -
        sudo apt-get install -y nodejs
        sudo npm install -g css-validator
    
    - name: Validate CSS
      run: |
        css-validator assets/css/style.css || echo "CSS validation completed with warnings"

  # JavaScript Testing
  js-testing:
    runs-on: ubuntu-latest
    needs: jekyll-build
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install testing dependencies
      run: |
        npm init -y
        npm install --save-dev jest puppeteer
    
    - name: Run JavaScript tests
      run: |
        node tests/js-tests.js

  # Accessibility Testing
  accessibility-testing:
    runs-on: ubuntu-latest
    needs: jekyll-build
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'
        bundler-cache: true
    
    - name: Build Jekyll site
      run: bundle exec jekyll build
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install accessibility testing tools
      run: |
        npm install -g @axe-core/cli
        npm install -g lighthouse
    
    - name: Run accessibility tests
      run: |
        # Start local server
        cd _site && python3 -m http.server 8000 &
        SERVER_PID=$!
        sleep 5
        
        # Run axe accessibility tests
        axe http://localhost:8000 --exit
        
        # Run Lighthouse accessibility audit
        lighthouse http://localhost:8000 --output=json --output-path=lighthouse-report.json --only-categories=accessibility
        
        # Kill server
        kill $SERVER_PID

  # Performance Testing
  performance-testing:
    runs-on: ubuntu-latest
    needs: jekyll-build
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'
        bundler-cache: true
    
    - name: Build Jekyll site
      run: bundle exec jekyll build
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install performance testing tools
      run: |
        npm install -g lighthouse
    
    - name: Run performance tests
      run: |
        # Start local server
        cd _site && python3 -m http.server 8000 &
        SERVER_PID=$!
        sleep 5
        
        # Run Lighthouse performance audit
        lighthouse http://localhost:8000 --output=json --output-path=performance-report.json --only-categories=performance
        
        # Extract performance score
        PERFORMANCE_SCORE=$(node -e "const report = require('./performance-report.json'); console.log(report.categories.performance.score * 100);")
        echo "Performance Score: $PERFORMANCE_SCORE"
        
        # Fail if performance score is below 80
        if (( $(echo "$PERFORMANCE_SCORE < 80" | bc -l) )); then
          echo "Performance score is below 80: $PERFORMANCE_SCORE"
          exit 1
        fi
        
        # Kill server
        kill $SERVER_PID

  # SEO Testing
  seo-testing:
    runs-on: ubuntu-latest
    needs: jekyll-build
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'
        bundler-cache: true
    
    - name: Build Jekyll site
      run: bundle exec jekyll build
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install SEO testing tools
      run: |
        npm install -g lighthouse
    
    - name: Run SEO tests
      run: |
        # Start local server
        cd _site && python3 -m http.server 8000 &
        SERVER_PID=$!
        sleep 5
        
        # Run Lighthouse SEO audit
        lighthouse http://localhost:8000 --output=json --output-path=seo-report.json --only-categories=seo
        
        # Extract SEO score
        SEO_SCORE=$(node -e "const report = require('./seo-report.json'); console.log(report.categories.seo.score * 100);")
        echo "SEO Score: $SEO_SCORE"
        
        # Fail if SEO score is below 90
        if (( $(echo "$SEO_SCORE < 90" | bc -l) )); then
          echo "SEO score is below 90: $SEO_SCORE"
          exit 1
        fi
        
        # Kill server
        kill $SERVER_PID

  # Link Validation
  link-validation:
    runs-on: ubuntu-latest
    needs: jekyll-build
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'
        bundler-cache: true
    
    - name: Build Jekyll site
      run: bundle exec jekyll build
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install link checking tools
      run: |
        npm install -g linkchecker
    
    - name: Check links
      run: |
        # Start local server
        cd _site && python3 -m http.server 8000 &
        SERVER_PID=$!
        sleep 5
        
        # Check internal links
        linkchecker http://localhost:8000 --check-extern --no-robots --ignore-url="^mailto:" --ignore-url="^tel:" || echo "Link checking completed with warnings"
        
        # Kill server
        kill $SERVER_PID

  # Responsive Design Testing
  responsive-testing:
    runs-on: ubuntu-latest
    needs: jekyll-build
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'
        bundler-cache: true
    
    - name: Build Jekyll site
      run: bundle exec jekyll build
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install responsive testing tools
      run: |
        npm install -g lighthouse
    
    - name: Run responsive tests
      run: |
        # Start local server
        cd _site && python3 -m http.server 8000 &
        SERVER_PID=$!
        sleep 5
        
        # Test different viewport sizes
        for viewport in "mobile" "tablet" "desktop"; do
          echo "Testing $viewport viewport"
          lighthouse http://localhost:8000 --output=json --output-path="${viewport}-report.json" --emulated-form-factor=$viewport
        done
        
        # Kill server
        kill $SERVER_PID

  # Security Testing
  security-testing:
    runs-on: ubuntu-latest
    needs: jekyll-build
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'
        bundler-cache: true
    
    - name: Build Jekyll site
      run: bundle exec jekyll build
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install security testing tools
      run: |
        npm install -g lighthouse
    
    - name: Run security tests
      run: |
        # Start local server
        cd _site && python3 -m http.server 8000 &
        SERVER_PID=$!
        sleep 5
        
        # Run Lighthouse security audit
        lighthouse http://localhost:8000 --output=json --output-path=security-report.json --only-categories=best-practices
        
        # Extract security score
        SECURITY_SCORE=$(node -e "const report = require('./security-report.json'); console.log(report.categories['best-practices'].score * 100);")
        echo "Security Score: $SECURITY_SCORE"
        
        # Fail if security score is below 80
        if (( $(echo "$SECURITY_SCORE < 80" | bc -l) )); then
          echo "Security score is below 80: $SECURITY_SCORE"
          exit 1
        fi
        
        # Kill server
        kill $SERVER_PID

  # Deploy to GitHub Pages (only on main branch)
  deploy:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [jekyll-build, html-validation, css-validation, js-testing, accessibility-testing, performance-testing, seo-testing, link-validation, responsive-testing, security-testing]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'
        bundler-cache: true
    
    - name: Build Jekyll site
      run: bundle exec jekyll build
    
    - name: Setup Pages
      uses: actions/configure-pages@v4
    
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./_site
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
